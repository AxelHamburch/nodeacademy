<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg:svg
   width="282"
   height="282"
   viewBox="0 0 282 282"
   fill="none"
   version="1.1"
   id="svg17"
   sodipodi:docname="safari-pinned-tab.svg"
   inkscape:version="1.2.2 (732a01da63, 2022-12-09, custom)"
   inkscape:export-filename="../e003b571/favicon-32x32.png"
   inkscape:export-xdpi="10.89"
   inkscape:export-ydpi="10.89"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <sodipodi:namedview
     id="namedview19"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     showgrid="false"
     width="282px"
     inkscape:zoom="1.080441"
     inkscape:cx="202.69501"
     inkscape:cy="170.7636"
     inkscape:window-width="1452"
     inkscape:window-height="752"
     inkscape:window-x="544"
     inkscape:window-y="179"
     inkscape:window-maximized="0"
     inkscape:current-layer="svg17"
     inkscape:showpageshadow="2"
     inkscape:deskcolor="#d1d1d1" />
  <script
     id="cqywr">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) {
    var scriptNode = document.getElementById(scriptId);
    function showNotification() {
        const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {'detail': {}});
        window.dispatchEvent(evt);
    }
    function overrideCanvasProto(root) {
        function overrideCanvasInternal(name, old) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var width = this.width;
                        var height = this.height;
                        var context = this.getContext(&quot;2d&quot;);
                        var imageData = context.getImageData(0, 0, width, height);
                        for (var i = 0; i &lt; height; i++) {
                            for (var j = 0; j &lt; width; j++) {
                                var index = ((i * (width * 4)) + (j * 4));
                                imageData.data[index + 0] = imageData.data[index + 0] + r;
                                imageData.data[index + 1] = imageData.data[index + 1] + g;
                                imageData.data[index + 2] = imageData.data[index + 2] + b;
                                imageData.data[index + 3] = imageData.data[index + 3] + a;
                            }
                        }
                        context.putImageData(imageData, 0, 0);
                        showNotification();
                        return old.apply(this, arguments);
                    }
                }
            );
        }
        overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL);
        overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob);
        //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile);
    }
    function overrideCanvaRendProto(root) {
        const name = &quot;getImageData&quot;;
        const getImageData = root.prototype.getImageData;

        root.prototype[storedObjectPrefix + name] = getImageData;

        Object.defineProperty(root.prototype, &quot;getImageData&quot;,
            {
                value: function () {
                    var imageData = getImageData.apply(this, arguments);
                    var height = imageData.height;
                    var width = imageData.width;
                    // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height);
                    for (var i = 0; i &lt; height; i++) {
                        for (var j = 0; j &lt; width; j++) {
                            var index = ((i * (width * 4)) + (j * 4));
                            imageData.data[index + 0] = imageData.data[index + 0] + r;
                            imageData.data[index + 1] = imageData.data[index + 1] + g;
                            imageData.data[index + 2] = imageData.data[index + 2] + b;
                            imageData.data[index + 3] = imageData.data[index + 3] + a;
                        }
                    }
                    showNotification();
                    return imageData;
                }
            }
        );
    }
    function inject(element) {
        if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) {
            try {
                var hasAccess = element.contentWindow.HTMLCanvasElement;
            } catch (e) {
                console.log(&quot;can't access &quot; + e);
                return;
            }
            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);
            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);
            overrideDocumentProto(element.contentWindow.Document);
        }
    }
    function overrideDocumentProto(root) {
        function doOverrideDocumentProto(old, name) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var element = old.apply(this, arguments);
                        // console.log(name+ &quot; everridden call&quot;+element);
                        if (element == null) {
                            return null;
                        }
                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||
                            Object.prototype.toString.call(element) === '[object NodeList]') {
                            for (var i = 0; i &lt; element.length; ++i) {
                                var el = element[i];
                                // console.log(&quot;elements list inject &quot; + name);
                                inject(el);
                            }
                        } else {
                            // console.log(&quot;element inject &quot; + name);
                            inject(element);
                        }
                        return element;
                    }
                }
            );
        }
        doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;);
        doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;);
        doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;);
    }
    overrideCanvasProto(HTMLCanvasElement);
    overrideCanvaRendProto(CanvasRenderingContext2D);
    overrideDocumentProto(Document);
    scriptNode.parentNode.removeChild(scriptNode);
})(-8,5,8,29,&quot;cqywr&quot;, &quot;ebgik&quot;);} catch (e) {console.error(e);}</script>
  <xhtml:script>(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</xhtml:script>
  <svg:g
     id="g1002"
     transform="translate(-226.983,-0.00300598)">
    <svg:circle
       cx="367.983"
       cy="141.00301"
       r="141"
       fill="#7b1af7"
       id="circle6" />
    <svg:path
       d="m 306.761,144.047 94,-81.0004 c 4.096,-2.6231 8,0 5.5,4.5 l -30,59.0004 h 53.5 c 0,0 8.5,0 0,7 l -92.5,81.5 c -6.5,5.5 -11,2.5 -6.5,-6 l 29,-57.5 h -53 c 0,0 -8.5,0 0,-7.5 z"
       fill="#ffffff"
       id="path8" />
  </svg:g>
  <svg:defs
     id="defs15">
    <svg:clipPath
       id="clip0">
      <svg:rect
         width="509"
         height="282"
         fill="#ffffff"
         id="rect12"
         x="0"
         y="0" />
    </svg:clipPath>
  </svg:defs>
</svg:svg>
